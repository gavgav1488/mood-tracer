import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import EmmoHistoryPage from './page';
import { useAuth } from '@/context/auth-context';
import { useRouter } from 'next/navigation';

// –ú–æ–∫–∞–µ–º —Ö—É–∫–∏
jest.mock('@/context/auth-context', () => ({
  useAuth: jest.fn(),
}));

jest.mock('next/navigation', () => ({
  useRouter: jest.fn(),
}));

// –ú–æ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç EmmoHistoryVisualization
jest.mock('@/components/mood/emmo-history-visualization', () => ({
  EmmoHistoryVisualization: jest.fn().mockImplementation(({ onEntrySelected }) => (
    <div data-testid="emmo-history-visualization">
      –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π
      <button onClick={() => onEntrySelected({ id: '1', emoji: 'üòä', date: '2023-06-01T12:00:00Z' })}>
        –í—ã–±—Ä–∞—Ç—å –∑–∞–ø–∏—Å—å
      </button>
    </div>
  )),
}));

describe('EmmoHistoryPage', () => {
  const mockRouter = {
    push: jest.fn(),
    back: jest.fn(),
  };

  beforeEach(() => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è —Ö—É–∫–æ–≤
    (useRouter as jest.Mock).mockReturnValue(mockRouter);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', async () => {
    (useAuth as jest.Mock).mockReturnValue({
      user: null,
      isLoading: false,
    });

    render(<EmmoHistoryPage />);
    
    await waitFor(() => {
      expect(mockRouter.push).toHaveBeenCalledWith('/login');
    });
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞', () => {
    (useAuth as jest.Mock).mockReturnValue({
      user: null,
      isLoading: true,
    });

    render(<EmmoHistoryPage />);
    
    expect(screen.getByRole('status')).toBeInTheDocument();
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', () => {
    (useAuth as jest.Mock).mockReturnValue({
      user: { id: 'user1' },
      isLoading: false,
    });

    render(<EmmoHistoryPage />);
    
    expect(screen.getByText('–ò—Å—Ç–æ—Ä–∏—è —ç–º–æ—Ü–∏–π')).toBeInTheDocument();
    expect(screen.getByText('–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–∞—à–∏—Ö —ç–º–æ—Ü–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ EMMO')).toBeInTheDocument();
    expect(screen.getByTestId('emmo-history-visualization')).toBeInTheDocument();
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–ø–∏—Å–∏', async () => {
    (useAuth as jest.Mock).mockReturnValue({
      user: { id: 'user1' },
      isLoading: false,
    });

    render(<EmmoHistoryPage />);
    
    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
    expect(screen.getByText('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')).toBeInTheDocument();
    
    // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –∑–∞–ø–∏—Å—å"
    screen.getByText('–í—ã–±—Ä–∞—Ç—å –∑–∞–ø–∏—Å—å').click();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏
    await waitFor(() => {
      expect(screen.getByText('–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏')).toBeInTheDocument();
    });
  });

  it('–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞–∑–∞–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"', () => {
    (useAuth as jest.Mock).mockReturnValue({
      user: { id: 'user1' },
      isLoading: false,
    });

    render(<EmmoHistoryPage />);
    
    screen.getByText('–ù–∞–∑–∞–¥').click();
    
    expect(mockRouter.back).toHaveBeenCalledTimes(1);
  });
});
