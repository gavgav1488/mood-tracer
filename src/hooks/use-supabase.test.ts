import { renderHook, act } from '@testing-library/react';
import { useSupabase } from './use-supabase';
import { createBrowserClient } from '@supabase/ssr';

// –ú–æ–∫–∞–µ–º –º–æ–¥—É–ª—å @supabase/ssr
jest.mock('@supabase/ssr', () => ({
  createBrowserClient: jest.fn(),
}));

describe('useSupabase', () => {
  // –ú–æ–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ Supabase
  const mockSelect = jest.fn();
  const mockFrom = jest.fn();
  const mockOrder = jest.fn();
  const mockEq = jest.fn();
  const mockInsert = jest.fn();
  const mockUpdate = jest.fn();
  const mockDelete = jest.fn();
  const mockSingle = jest.fn();
  
  beforeEach(() => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    jest.clearAllMocks();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É –º–æ–∫–æ–≤ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–≤ Supabase
    mockSelect.mockReturnThis();
    mockFrom.mockReturnThis();
    mockOrder.mockReturnThis();
    mockEq.mockReturnThis();
    mockInsert.mockReturnThis();
    mockUpdate.mockReturnThis();
    mockDelete.mockReturnThis();
    mockSingle.mockReturnThis();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è createBrowserClient
    (createBrowserClient as jest.Mock).mockReturnValue({
      from: mockFrom,
    });
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É –≤—ã–∑–æ–≤–æ–≤
    mockFrom.mockReturnValue({
      select: mockSelect,
      insert: mockInsert,
      update: mockUpdate,
      delete: mockDelete,
    });
    
    mockSelect.mockReturnValue({
      order: mockOrder,
      eq: mockEq,
      single: mockSingle,
    });
    
    mockOrder.mockReturnValue({
      eq: mockEq,
    });
    
    mockEq.mockReturnValue({
      single: mockSingle,
    });
    
    mockInsert.mockReturnValue({
      select: mockSelect,
    });
    
    mockUpdate.mockReturnValue({
      eq: mockEq,
    });
  });
  
  it('should return all the expected methods', () => {
    const { result } = renderHook(() => useSupabase());
    
    expect(result.current).toHaveProperty('getMoodEntries');
    expect(result.current).toHaveProperty('getMoodEntry');
    expect(result.current).toHaveProperty('createMoodEntry');
    expect(result.current).toHaveProperty('updateMoodEntry');
    expect(result.current).toHaveProperty('deleteMoodEntry');
    expect(result.current).toHaveProperty('clearCache');
  });
  
  it('should call Supabase client with correct parameters when getMoodEntries is called', async () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    mockOrder.mockReturnValue({
      data: [{ id: '1', emoji: 'üòä', note: 'Test note' }],
      error: null,
    });
    
    const { result } = renderHook(() => useSupabase());
    
    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ getMoodEntries
    let entries;
    await act(async () => {
      entries = await result.current.getMoodEntries();
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã Supabase –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(mockFrom).toHaveBeenCalledWith('mood_entries');
    expect(mockSelect).toHaveBeenCalledWith('*');
    expect(mockOrder).toHaveBeenCalledWith('date', { ascending: false });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    expect(entries).toEqual([{ id: '1', emoji: 'üòä', note: 'Test note' }]);
  });
  
  it('should use cache when getMoodEntries is called twice without forceRefresh', async () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    mockOrder.mockReturnValue({
      data: [{ id: '1', emoji: 'üòä', note: 'Test note' }],
      error: null,
    });
    
    const { result } = renderHook(() => useSupabase());
    
    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ getMoodEntries –¥–≤–∞–∂–¥—ã
    await act(async () => {
      await result.current.getMoodEntries();
      await result.current.getMoodEntries();
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ from –±—ã–ª –≤—ã–∑–≤–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (–≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –¥–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ –∫—ç—à–∞)
    expect(mockFrom).toHaveBeenCalledTimes(1);
  });
  
  it('should not use cache when getMoodEntries is called with forceRefresh=true', async () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    mockOrder.mockReturnValue({
      data: [{ id: '1', emoji: 'üòä', note: 'Test note' }],
      error: null,
    });
    
    const { result } = renderHook(() => useSupabase());
    
    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ getMoodEntries –¥–≤–∞–∂–¥—ã, –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ —Å forceRefresh=true
    await act(async () => {
      await result.current.getMoodEntries();
      await result.current.getMoodEntries({ forceRefresh: true });
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ from –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–≤–∞–∂–¥—ã
    expect(mockFrom).toHaveBeenCalledTimes(2);
  });
  
  it('should clear cache when clearCache is called', async () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    mockOrder.mockReturnValue({
      data: [{ id: '1', emoji: 'üòä', note: 'Test note' }],
      error: null,
    });
    
    const { result } = renderHook(() => useSupabase());
    
    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ getMoodEntries, –∑–∞—Ç–µ–º clearCache, –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ getMoodEntries
    await act(async () => {
      await result.current.getMoodEntries();
      result.current.clearCache();
      await result.current.getMoodEntries();
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ from –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–≤–∞–∂–¥—ã (–∫—ç—à –±—ã–ª –æ—á–∏—â–µ–Ω)
    expect(mockFrom).toHaveBeenCalledTimes(2);
  });
});
