'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { useSupabase } from '@/hooks/use-supabase';
import { MoodEntry } from '@/lib/supabase';
import { FileDown, Loader2, FileText } from 'lucide-react';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import { useToast } from '@/components/ui/use-toast';

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø—ã –¥–ª—è jsPDF-autotable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

interface ExportToPdfProps {
  className?: string;
}

export function ExportToPdf({ className = '' }: ExportToPdfProps) {
  const [isExporting, setIsExporting] = useState(false);
  const { getMoodEntries } = useSupabase();
  const { toast } = useToast();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return format(date, 'dd.MM.yyyy', { locale: ru });
    } catch (error) {
      return dateString;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
  const getEmojiName = (emoji: string) => {
    const emojiMap: Record<string, string> = {
      'üòä': '–†–∞–¥–æ—Å—Ç—å',
      'üòê': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ',
      'üò¢': '–ì—Ä—É—Å—Ç—å',
      'ü•≥': '–í–æ—Å—Ç–æ—Ä–≥',
      'üò§': '–ó–ª–æ—Å—Ç—å',
      'üò¥': '–£—Å—Ç–∞–ª–æ—Å—Ç—å',
      'üò∞': '–¢—Ä–µ–≤–æ–≥–∞',
    };
    return emojiMap[emoji] || emoji;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PDF
  const exportToPdf = async () => {
    setIsExporting(true);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const entries = await getMoodEntries();

      if (entries.length === 0) {
        toast({
          title: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
          description: '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF',
          variant: 'destructive',
          duration: 3000,
        });
        return;
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
      entries.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π PDF –¥–æ–∫—É–º–µ–Ω—Ç
      const doc = new jsPDF();

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      doc.setFontSize(20);
      doc.text('–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', 105, 15, { align: 'center' });

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π —ç–∫—Å–ø–æ—Ä—Ç–∞
      doc.setFontSize(12);
      doc.text(`–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç ${format(new Date(), 'dd.MM.yyyy', { locale: ru })}`, 105, 22, { align: 'center' });

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø–∏—Å–µ–π
      doc.setFontSize(10);
      doc.text(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${entries.length}`, 105, 30, { align: 'center' });

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
      const tableData = entries.map(entry => [
        formatDate(entry.date),
        getEmojiName(entry.emoji),
        entry.note || '-'
      ]);

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–ø–∏—Å—è–º–∏
      doc.autoTable({
        startY: 35,
        head: [['–î–∞—Ç–∞', '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–ó–∞–º–µ—Ç–∫–∞']],
        body: tableData,
        headStyles: {
          fillColor: [147, 51, 234], // –¶–≤–µ—Ç primary –≤ RGB
          textColor: [255, 255, 255],
          fontStyle: 'bold'
        },
        styles: {
          fontSize: 10,
          cellPadding: 3,
        },
        columnStyles: {
          0: { cellWidth: 25 },
          1: { cellWidth: 25 },
          2: { cellWidth: 'auto' }
        },
        margin: { top: 35 },
        didDrawPage: (data) => {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          doc.setFontSize(8);
          doc.text(
            `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${data.pageNumber} –∏–∑ ${doc.getNumberOfPages()}`,
            data.settings.margin.left,
            doc.internal.pageSize.height - 10
          );
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤ –Ω–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
      doc.setFontSize(8);
      doc.text(
        '–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"',
        105,
        doc.internal.pageSize.height - 10,
        { align: 'center' }
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
      doc.save(`diary_export_${format(new Date(), 'yyyy-MM-dd')}.pdf`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ
      toast({
        title: '–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
        description: `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${entries.length} –∑–∞–ø–∏—Å–µ–π –≤ PDF`,
        duration: 3000,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ PDF:', error);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      toast({
        title: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ PDF',
        variant: 'destructive',
        duration: 3000,
      });
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <Button
      variant="outline"
      onClick={exportToPdf}
      disabled={isExporting}
      className={`rounded-full ${className}`}
      title="–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF"
    >
      {isExporting ? (
        <>
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          <span className="hidden sm:inline">–≠–∫—Å–ø–æ—Ä—Ç...</span>
        </>
      ) : (
        <>
          <FileText className="mr-2 h-4 w-4" />
          <span className="hidden sm:inline">PDF</span>
        </>
      )}
    </Button>
  );
}
