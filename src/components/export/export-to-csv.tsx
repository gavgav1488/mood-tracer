'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { useSupabase } from '@/hooks/use-supabase';
import { MoodEntry } from '@/lib/supabase';
import { FileDown, Loader2 } from 'lucide-react';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';

interface ExportToCsvProps {
  className?: string;
}

export function ExportToCsv({ className = '' }: ExportToCsvProps) {
  const [isExporting, setIsExporting] = useState(false);
  const { getMoodEntries } = useSupabase();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return format(date, 'dd.MM.yyyy', { locale: ru });
    } catch (error) {
      return dateString;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
  const getEmojiName = (emoji: string) => {
    const emojiMap: Record<string, string> = {
      'üòä': '–†–∞–¥–æ—Å—Ç—å',
      'üòê': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ',
      'üò¢': '–ì—Ä—É—Å—Ç—å',
      'ü•≥': '–í–æ—Å—Ç–æ—Ä–≥',
      'üò§': '–ó–ª–æ—Å—Ç—å',
      'üò¥': '–£—Å—Ç–∞–ª–æ—Å—Ç—å',
      'üò∞': '–¢—Ä–µ–≤–æ–≥–∞',
    };
    return emojiMap[emoji] || emoji;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ CSV
  const escapeCsvValue = (value: string) => {
    if (value === null || value === undefined) return '';
    
    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—è—Ç—É—é, –¥–≤–æ–π–Ω—É—é –∫–∞–≤—ã—á–∫—É –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏,
    // –∑–∞–∫–ª—é—á–∞–µ–º –µ–≥–æ –≤ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    const needsQuotes = /[",\n\r]/.test(value);
    
    if (needsQuotes) {
      // –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–µ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
      const escaped = value.replace(/"/g, '""');
      return `"${escaped}"`;
    }
    
    return value;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CSV-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const createCsvContent = (entries: MoodEntry[]) => {
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    const headers = ['–î–∞—Ç–∞', '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–ó–∞–ø–∏—Å—å'];
    
    // –°—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    const rows = entries.map(entry => [
      formatDate(entry.date),
      `${entry.emoji} ${getEmojiName(entry.emoji)}`,
      entry.note || ''
    ]);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∏
    const csvContent = [
      headers.map(escapeCsvValue).join(','),
      ...rows.map(row => row.map(escapeCsvValue).join(','))
    ].join('\n');
    
    return csvContent;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV
  const exportToCsv = async () => {
    try {
      setIsExporting(true);
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const entries = await getMoodEntries();
      
      if (entries.length === 0) {
        alert('–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        setIsExporting(false);
        return;
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
      const sortedEntries = [...entries].sort((a, b) => 
        new Date(b.date).getTime() - new Date(a.date).getTime()
      );
      
      // –°–æ–∑–¥–∞–µ–º CSV-–∫–æ–Ω—Ç–µ–Ω—Ç
      const csvContent = createCsvContent(sortedEntries);
      
      // –°–æ–∑–¥–∞–µ–º Blob —Å CSV-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      
      link.setAttribute('href', url);
      link.setAttribute('download', 'mood-diary.csv');
      link.style.visibility = 'hidden';
      
      document.body.appendChild(link);
      link.click();
      
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <Button
      onClick={exportToCsv}
      disabled={isExporting}
      variant="outline"
      className={className}
    >
      {isExporting ? (
        <>
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          –≠–∫—Å–ø–æ—Ä—Ç...
        </>
      ) : (
        <>
          <FileDown className="mr-2 h-4 w-4" />
          –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
        </>
      )}
    </Button>
  );
}
