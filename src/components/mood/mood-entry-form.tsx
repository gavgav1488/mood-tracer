'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { EmojiPicker } from './emoji-picker';
import { NoteEditor } from './note-editor';
import { MoodVisualization } from './mood-visualization';
import { useSupabase } from '@/hooks/use-supabase';
import { useAuth } from '@/context/auth-context';

export function MoodEntryForm() {
  const [emoji, setEmoji] = useState('üòä');
  const [note, setNote] = useState('');
  const [isSaving, setIsSaving] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const { createMoodEntry } = useSupabase();
  const { user } = useAuth();

  const handleSave = async () => {
    if (!user) return;

    try {
      setIsSaving(true);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
      const { validateData, moodEntrySchema } = await import('@/lib/validations');
      const validationResult = validateData(moodEntrySchema, {
        date: new Date().toISOString(),
        emoji,
        note,
      });

      if (!validationResult.success) {
        console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validationResult.errors);
        return;
      }

      await createMoodEntry(validationResult.data);

      setIsSuccess(true);
      setTimeout(() => setIsSuccess(false), 3000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?</CardTitle>
        <CardDescription>
          –í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∏ –∑–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <EmojiPicker selectedEmoji={emoji} onSelect={setEmoji} />

        <div className="mt-6">
          <MoodVisualization emoji={emoji} />
        </div>

        <div className="mt-6">
          <NoteEditor
            initialValue={note}
            onChange={setNote}
            autoSave={false}
          />
        </div>
      </CardContent>
      <CardFooter className="flex justify-between">
        <div>
          {isSuccess && (
            <p className="text-sm text-green-600 dark:text-green-400">
              –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!
            </p>
          )}
        </div>
        <Button
          onClick={handleSave}
          disabled={isSaving || !note.trim()}
        >
          {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'}
        </Button>
      </CardFooter>
    </Card>
  );
}
