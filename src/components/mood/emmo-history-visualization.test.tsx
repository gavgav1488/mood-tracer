import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { EmmoHistoryVisualization } from './emmo-history-visualization';
import { useSupabase } from '@/hooks/use-supabase';
import { MoodEntry } from '@/lib/supabase';

// –ú–æ–∫–∞–µ–º —Ö—É–∫ useSupabase
jest.mock('@/hooks/use-supabase', () => ({
  useSupabase: jest.fn(),
}));

// –ú–æ–∫–∞–µ–º p5.js
jest.mock('p5', () => {
  return jest.fn().mockImplementation(() => ({
    remove: jest.fn(),
  }));
});

describe('EmmoHistoryVisualization', () => {
  const mockEntries: MoodEntry[] = [
    {
      id: '1',
      user_id: 'user1',
      date: '2023-06-01T12:00:00Z',
      emoji: 'üòä',
      note: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å 1',
      created_at: '2023-06-01T12:00:00Z',
      intensity: 80,
      x_position: 75,
      y_position: 25,
      tags: ['—Ç–µ—Å—Ç', '—Ä–∞–¥–æ—Å—Ç—å'],
    },
    {
      id: '2',
      user_id: 'user1',
      date: '2023-06-02T12:00:00Z',
      emoji: 'üò¢',
      note: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å 2',
      created_at: '2023-06-02T12:00:00Z',
      intensity: 60,
      x_position: 25,
      y_position: 75,
      tags: ['—Ç–µ—Å—Ç', '–≥—Ä—É—Å—Ç—å'],
    },
  ];

  const mockGetMoodEntries = jest.fn().mockResolvedValue(mockEntries);

  beforeEach(() => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è —Ö—É–∫–æ–≤
    (useSupabase as jest.Mock).mockReturnValue({
      getMoodEntries: mockGetMoodEntries,
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞', async () => {
    render(<EmmoHistoryVisualization />);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    expect(screen.getByText('–ò—Å—Ç–æ—Ä–∏—è —ç–º–æ—Ü–∏–π')).toBeInTheDocument();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    await waitFor(() => {
      expect(screen.getByText('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥')).toBeInTheDocument();
    });
  });

  it('–≤—ã–∑—ã–≤–∞–µ—Ç getMoodEntries –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏', async () => {
    render(<EmmoHistoryVisualization />);
    
    await waitFor(() => {
      expect(mockGetMoodEntries).toHaveBeenCalledTimes(1);
    });
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π', async () => {
    render(<EmmoHistoryVisualization />);
    
    await waitFor(() => {
      expect(screen.getByText('2 –∑–∞–ø–∏—Å–∏')).toBeInTheDocument();
    });
  });

  it('–≤—ã–∑—ã–≤–∞–µ—Ç onEntrySelected –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–ø–∏—Å–∏', async () => {
    const mockOnEntrySelected = jest.fn();
    render(<EmmoHistoryVisualization onEntrySelected={mockOnEntrySelected} />);
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    await waitFor(() => {
      expect(mockGetMoodEntries).toHaveBeenCalledTimes(1);
    });
    
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫ –Ω–∞ canvas p5.js,
    // –ø–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
    expect(mockOnEntrySelected).not.toHaveBeenCalled();
  });
});
