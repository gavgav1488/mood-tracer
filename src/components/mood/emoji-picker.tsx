'use client';

import { cn } from '@/lib/utils';
import { useState, useEffect } from 'react';
import { ChevronDown } from 'lucide-react';
import { CaretDownOutlined, PlusOutlined } from '../icons/ant-icons';

// –≠–º–æ–¥–∑–∏ –≤ —Å—Ç–∏–ª–µ EMMO (12 —à—Ç—É–∫ –¥–ª—è —Å–µ—Ç–∫–∏ 4√ó3)
const DEFAULT_EMOJIS = [
  { value: 'üòä', label: '–†–∞–¥–æ—Å—Ç—å' },
  { value: 'üòå', label: '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ' },
  { value: 'ü•∞', label: '–õ—é–±–æ–≤—å' },
  { value: 'üò¥', label: '–£—Å—Ç–∞–ª–æ—Å—Ç—å' },
  { value: 'üò¢', label: '–ì—Ä—É—Å—Ç—å' },
  { value: 'üò∞', label: '–¢—Ä–µ–≤–æ–≥–∞' },
  { value: 'üò§', label: '–ó–ª–æ—Å—Ç—å' },
  { value: 'ü§ó', label: '–û–±—ä—è—Ç–∏—è' },
  { value: '‚ú®', label: '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ' },
  { value: 'üíù', label: '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å' },
  { value: 'üå∏', label: '–ù–µ–∂–Ω–æ—Å—Ç—å' },
  { value: 'üôÉ', label: '–ò–≥—Ä–∏–≤–æ—Å—Ç—å' },
];

interface EmojiPickerProps {
  selectedEmoji: string;
  onSelect: (emoji: string) => void;
}

export function EmojiPicker({ selectedEmoji, onSelect }: EmojiPickerProps) {
  const [hoverEmoji, setHoverEmoji] = useState<string | null>(null);
  const [emojis, setEmojis] = useState<Array<{ value: string; label: string }>>(
    DEFAULT_EMOJIS.map(e => ({ value: e.value, label: e.label }))
  );

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —ç–º–æ–¥–∑–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const savedEmojis = localStorage.getItem('custom-emojis');
      if (savedEmojis) {
        try {
          const parsedEmojis = JSON.parse(savedEmojis);
          if (Array.isArray(parsedEmojis) && parsedEmojis.length > 0) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ { emoji, label } –≤ { value, label }
            setEmojis(parsedEmojis.map(e => ({ value: e.emoji, label: e.label })));
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–º–æ–¥–∑–∏:', error);
        }
      }
    }
  }, []);

  return (
    <div className="space-y-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º */}
      <div className="text-center mb-8">
        <h3 className="text-2xl font-bold mb-3 text-gradient-primary font-handwritten">
          –ö–∞–∫ —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? ‚ú®
        </h3>
        <p className="text-muted-foreground leading-relaxed">
          –í—ã–±–µ—Ä–∏ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
        </p>
      </div>

      {/* –°–µ—Ç–∫–∞ —ç–º–æ–¥–∑–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º */}
      <div className="grid grid-cols-4 gap-4 max-w-md mx-auto">
        {emojis.map((emoji, index) => (
          <button
            key={emoji.value}
            className={cn(
              "aspect-square rounded-3xl text-4xl transition-all duration-300",
              "hover:scale-110 hover:shadow-xl active:scale-95",
              "flex items-center justify-center relative overflow-hidden",
              "glass-card animate-scale-in",
              selectedEmoji === emoji.value && "animate-glow"
            )}
            style={{
              animationDelay: `${index * 0.1}s`,
              backgroundColor: selectedEmoji === emoji.value ? 'hsl(var(--primary))' : undefined,
              color: selectedEmoji === emoji.value ? 'hsl(var(--primary-foreground))' : undefined,
              transform: selectedEmoji === emoji.value ? 'scale(1.1)' : 'scale(1)',
              boxShadow: selectedEmoji === emoji.value
                ? '0 12px 40px hsl(var(--primary) / 0.4)'
                : undefined
            }}
            onClick={() => onSelect(emoji.value)}
            onMouseEnter={() => setHoverEmoji(emoji.value)}
            onMouseLeave={() => setHoverEmoji(null)}
            title={emoji.label}
          >
            {/* Gradient overlay for selected state */}
            {selectedEmoji === emoji.value && (
              <div className="absolute inset-0 bg-gradient-primary opacity-90 rounded-3xl"></div>
            )}

            {/* Emoji */}
            <span className="relative z-10 animate-float" style={{animationDelay: `${index * 0.2}s`}}>
              {emoji.value}
            </span>

            {/* Hover effect */}
            {hoverEmoji === emoji.value && selectedEmoji !== emoji.value && (
              <div className="absolute inset-0 bg-primary/10 rounded-3xl"></div>
            )}
          </button>
        ))}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ" */}
      <div className="text-center mt-6">
        <button className="glass-button rounded-2xl px-6 py-3 font-medium text-sm hover:scale-105 transition-all duration-300 inline-flex items-center gap-2">
          <PlusOutlined className="h-4 w-4" />
          <span>–ë–æ–ª—å—à–µ —ç–º–æ–¥–∑–∏</span>
          <CaretDownOutlined className="h-4 w-4 animate-bounce" />
        </button>
      </div>

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
      {selectedEmoji && (
        <div className="text-center mt-8 animate-slide-up">
          <div className="glass-card rounded-3xl p-6 max-w-xs mx-auto">
            <div className="text-6xl mb-4 animate-float">{selectedEmoji}</div>
            <p className="text-lg font-semibold text-gradient-primary font-handwritten">
              {emojis.find(e => e.value === selectedEmoji)?.label}
            </p>
            <div className="w-16 h-1 bg-gradient-primary rounded-full mx-auto mt-3"></div>
          </div>
        </div>
      )}
    </div>
  );
}
