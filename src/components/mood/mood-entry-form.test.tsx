import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { MoodEntryForm } from './mood-entry-form';
import { useSupabase } from '@/hooks/use-supabase';
import { useAuth } from '@/context/auth-context';

// –ú–æ–∫–∞–µ–º —Ö—É–∫–∏
jest.mock('@/hooks/use-supabase', () => ({
  useSupabase: jest.fn(),
}));

jest.mock('@/context/auth-context', () => ({
  useAuth: jest.fn(),
}));

// –ú–æ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
jest.mock('./emoji-picker', () => ({
  EmojiPicker: ({ selectedEmoji, onSelect }: { selectedEmoji: string; onSelect: (emoji: string) => void }) => (
    <div data-testid="emoji-picker">
      <span>{selectedEmoji}</span>
      <button onClick={() => onSelect('üòä')}>–í—ã–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏</button>
    </div>
  ),
}));

jest.mock('./note-editor', () => ({
  NoteEditor: ({ initialValue, onChange }: { initialValue: string; onChange: (note: string) => void }) => (
    <div data-testid="note-editor">
      <textarea
        value={initialValue}
        onChange={(e) => onChange(e.target.value)}
        data-testid="note-textarea"
      />
    </div>
  ),
}));

jest.mock('./mood-visualization', () => ({
  MoodVisualization: ({ emoji }: { emoji: string }) => (
    <div data-testid="mood-visualization">
      <span>{emoji}</span>
    </div>
  ),
}));

describe('MoodEntryForm', () => {
  const mockCreateMoodEntry = jest.fn();
  const mockClearCache = jest.fn();
  const mockOnEntryCreated = jest.fn();

  beforeEach(() => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è —Ö—É–∫–æ–≤
    (useSupabase as jest.Mock).mockReturnValue({
      createMoodEntry: mockCreateMoodEntry,
      clearCache: mockClearCache,
    });

    (useAuth as jest.Mock).mockReturnValue({
      user: { id: 'test-user-id' },
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    mockCreateMoodEntry.mockReset();
    mockClearCache.mockReset();
    mockOnEntryCreated.mockReset();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders correctly', () => {
    render(<MoodEntryForm />);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    expect(screen.getByText('–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?')).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
    expect(screen.getByTestId('emoji-picker')).toBeInTheDocument();
    expect(screen.getByTestId('mood-visualization')).toBeInTheDocument();
    expect(screen.getByTestId('note-editor')).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–µ –∑–∞–º–µ—Ç–∫–∏ –ø—É—Å—Ç–æ–µ)
    const saveButton = screen.getByText('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å');
    expect(saveButton).toBeInTheDocument();
    expect(saveButton).toBeDisabled();
  });

  it('enables save button when note is not empty', () => {
    render(<MoodEntryForm />);

    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    const noteTextarea = screen.getByTestId('note-textarea');
    fireEvent.change(noteTextarea, { target: { value: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞' } });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞
    const saveButton = screen.getByText('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å');
    expect(saveButton).not.toBeDisabled();
  });
});
