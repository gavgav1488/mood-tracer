import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { MoodEntryForm } from './mood-entry-form';
import { useAuth } from '@/context/auth-context';
import { useSupabase } from '@/hooks/use-supabase';

// –ú–æ–∫–∞–µ–º —Ö—É–∫–∏
jest.mock('@/context/auth-context', () => ({
  useAuth: jest.fn(),
}));

jest.mock('@/hooks/use-supabase', () => ({
  useSupabase: jest.fn(),
}));

describe('MoodEntryForm', () => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
  beforeEach(() => {
    // –ú–æ–∫ –¥–ª—è useAuth
    (useAuth as jest.Mock).mockReturnValue({
      user: { id: 'test-user-id' },
    });

    // –ú–æ–∫ –¥–ª—è useSupabase
    const createMoodEntryMock = jest.fn().mockResolvedValue({ id: 'test-entry-id' });
    (useSupabase as jest.Mock).mockReturnValue({
      createMoodEntry: createMoodEntryMock,
    });
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–æ—Ä–º—É —Å —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª–µ–º', () => {
    render(<MoodEntryForm />);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    expect(screen.getByText('–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?')).toBeInTheDocument();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–º–æ–¥–∑–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
    expect(screen.getByText('üòä')).toBeInTheDocument();
    expect(screen.getByText('üòî')).toBeInTheDocument();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    expect(screen.getByPlaceholderText(/–Ω–∞–ø–∏—à–∏—Ç–µ –æ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö/i)).toBeInTheDocument();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    expect(screen.getByRole('button', { name: /—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/i })).toBeInTheDocument();
  });

  it('–ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏', () => {
    render(<MoodEntryForm />);
    
    // –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    fireEvent.click(screen.getByText('üòä'));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–º–æ–¥–∑–∏ –≤—ã–±—Ä–∞–Ω–æ (–∏–º–µ–µ—Ç –∫–ª–∞—Å—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞)
    expect(screen.getByText('üòä').closest('button')).toHaveClass('ring-2');
  });

  it('–ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –∑–∞–º–µ—Ç–∫–∏', () => {
    render(<MoodEntryForm />);
    
    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –∑–∞–º–µ—Ç–∫–∏
    const noteInput = screen.getByPlaceholderText(/–Ω–∞–ø–∏—à–∏—Ç–µ –æ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö/i);
    fireEvent.change(noteInput, { target: { value: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞' } });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω
    expect(noteInput).toHaveValue('–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞');
  });

  it('—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É', async () => {
    render(<MoodEntryForm />);
    
    // –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    fireEvent.click(screen.getByText('üòä'));
    
    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –∑–∞–º–µ—Ç–∫–∏
    const noteInput = screen.getByPlaceholderText(/–Ω–∞–ø–∏—à–∏—Ç–µ –æ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö/i);
    fireEvent.change(noteInput, { target: { value: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞' } });
    
    // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    fireEvent.click(screen.getByRole('button', { name: /—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/i }));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è createMoodEntry –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    await waitFor(() => {
      expect(useSupabase().createMoodEntry).toHaveBeenCalledWith(
        expect.objectContaining({
          emoji: 'üòä',
          note: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞',
        })
      );
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    await waitFor(() => {
      expect(screen.getByText(/–∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞/i)).toBeInTheDocument();
    });
  });
});
