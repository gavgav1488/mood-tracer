'use client';

import { useEffect, useRef } from 'react';
import p5 from 'p5';

interface MoodVisualizationProps {
  emoji: string;
  className?: string;
}

// –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–º–æ–¥–∑–∏
const emojiColors: Record<string, { primary: string; secondary: string; background: string }> = {
  'üòä': { primary: '#FFD700', secondary: '#FFA500', background: '#FFFACD' }, // –†–∞–¥–æ—Å—Ç—å: –∂–µ–ª—Ç—ã–π/–æ—Ä–∞–Ω–∂–µ–≤—ã–π
  'üòê': { primary: '#A9A9A9', secondary: '#D3D3D3', background: '#F5F5F5' }, // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ: —Å–µ—Ä—ã–π
  'üò¢': { primary: '#4682B4', secondary: '#1E90FF', background: '#F0F8FF' }, // –ì—Ä—É—Å—Ç—å: —Å–∏–Ω–∏–π
  'ü•≥': { primary: '#FF69B4', secondary: '#FF1493', background: '#FFF0F5' }, // –í–æ—Å—Ç–æ—Ä–≥: —Ä–æ–∑–æ–≤—ã–π
  'üò§': { primary: '#DC143C', secondary: '#B22222', background: '#FFF0F0' }, // –ó–ª–æ—Å—Ç—å: –∫—Ä–∞—Å–Ω—ã–π
  'üò¥': { primary: '#9370DB', secondary: '#8A2BE2', background: '#F8F4FF' }, // –£—Å—Ç–∞–ª–æ—Å—Ç—å: —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
  'üò∞': { primary: '#20B2AA', secondary: '#48D1CC', background: '#F0FFFF' }, // –¢—Ä–µ–≤–æ–≥–∞: –±–∏—Ä—é–∑–æ–≤—ã–π
};

export function MoodVisualization({ emoji, className = '' }: MoodVisualizationProps) {
  const containerRef = useRef<HTMLDivElement>(null);
  const sketchRef = useRef<p5 | null>(null);

  useEffect(() => {
    if (!containerRef.current) return;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–∫–µ—Ç—á, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (sketchRef.current) {
      sketchRef.current.remove();
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∫–µ—Ç—á
    const sketch = (p: p5) => {
      const colors = emojiColors[emoji] || emojiColors['üòê'];
      const particles: Particle[] = [];
      const particleCount = 50;

      class Particle {
        x: number;
        y: number;
        size: number;
        speedX: number;
        speedY: number;
        color: string;

        constructor() {
          this.x = p.random(p.width);
          this.y = p.random(p.height);
          this.size = p.random(5, 15);
          this.speedX = p.random(-1, 1);
          this.speedY = p.random(-1, 1);
          this.color = p.random() > 0.5 ? colors.primary : colors.secondary;
        }

        update() {
          this.x += this.speedX;
          this.y += this.speedY;

          // –û—Ç—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –≥—Ä–∞–Ω–∏—Ü
          if (this.x < 0 || this.x > p.width) this.speedX *= -1;
          if (this.y < 0 || this.y > p.height) this.speedY *= -1;
        }

        display() {
          p.noStroke();
          p.fill(this.color);
          
          // –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–º–æ–¥–∑–∏
          if (emoji === 'üòä' || emoji === 'ü•≥') {
            // –ó–≤–µ–∑–¥—ã –¥–ª—è —Ä–∞–¥–æ—Å—Ç–∏ –∏ –≤–æ—Å—Ç–æ—Ä–≥–∞
            this.drawStar(this.x, this.y, this.size, this.size * 2, 5);
          } else if (emoji === 'üò¢' || emoji === 'üò∞') {
            // –ö–∞–ø–ª–∏ –¥–ª—è –≥—Ä—É—Å—Ç–∏ –∏ —Ç—Ä–µ–≤–æ–≥–∏
            this.drawDrop(this.x, this.y, this.size);
          } else if (emoji === 'üò§') {
            // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏ –¥–ª—è –∑–ª–æ—Å—Ç–∏
            this.drawTriangle(this.x, this.y, this.size);
          } else {
            // –ö—Ä—É–≥–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            p.ellipse(this.x, this.y, this.size);
          }
        }

        drawStar(x: number, y: number, radius1: number, radius2: number, npoints: number) {
          let angle = p.TWO_PI / npoints;
          let halfAngle = angle / 2.0;
          p.beginShape();
          for (let a = 0; a < p.TWO_PI; a += angle) {
            let sx = x + p.cos(a) * radius2;
            let sy = y + p.sin(a) * radius2;
            p.vertex(sx, sy);
            sx = x + p.cos(a + halfAngle) * radius1;
            sy = y + p.sin(a + halfAngle) * radius1;
            p.vertex(sx, sy);
          }
          p.endShape(p.CLOSE);
        }

        drawDrop(x: number, y: number, size: number) {
          p.beginShape();
          for (let i = 0; i < p.TWO_PI; i += 0.1) {
            let r = size * (1 + p.sin(i) * 0.3);
            let sx = x + p.cos(i) * r;
            let sy = y + p.sin(i) * r;
            p.vertex(sx, sy);
          }
          p.endShape(p.CLOSE);
        }

        drawTriangle(x: number, y: number, size: number) {
          p.triangle(
            x, y - size,
            x - size, y + size,
            x + size, y + size
          );
        }
      }

      p.setup = () => {
        const canvas = p.createCanvas(containerRef.current!.offsetWidth, 300);
        canvas.parent(containerRef.current!);
        
        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
        for (let i = 0; i < particleCount; i++) {
          particles.push(new Particle());
        }
        
        p.background(colors.background);
      };

      p.draw = () => {
        p.background(colors.background);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
        for (let particle of particles) {
          particle.update();
          particle.display();
        }
      };

      p.windowResized = () => {
        if (containerRef.current) {
          p.resizeCanvas(containerRef.current.offsetWidth, 300);
        }
      };
    };

    sketchRef.current = new p5(sketch);

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (sketchRef.current) {
        sketchRef.current.remove();
      }
    };
  }, [emoji]);

  return <div ref={containerRef} className={`w-full h-[300px] rounded-lg overflow-hidden ${className}`} />;
}
