'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Loader2, Save, Plus, X } from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏
const DEFAULT_EMOJIS = [
  { emoji: 'üòä', label: '–†–∞–¥–æ—Å—Ç—å' },
  { emoji: 'üòê', label: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ' },
  { emoji: 'üò¢', label: '–ì—Ä—É—Å—Ç—å' },
  { emoji: 'ü•≥', label: '–í–æ—Å—Ç–æ—Ä–≥' },
  { emoji: 'üò§', label: '–ó–ª–æ—Å—Ç—å' },
  { emoji: 'üò¥', label: '–£—Å—Ç–∞–ª–æ—Å—Ç—å' },
  { emoji: 'üò∞', label: '–¢—Ä–µ–≤–æ–≥–∞' },
];

interface EmojiSettingsProps {
  onSave?: () => void;
}

export function EmojiSettings({ onSave }: EmojiSettingsProps) {
  const [emojis, setEmojis] = useState<Array<{ emoji: string; label: string }>>(DEFAULT_EMOJIS);
  const [isSaving, setIsSaving] = useState(false);
  const { toast } = useToast();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const savedEmojis = localStorage.getItem('custom-emojis');
    if (savedEmojis) {
      try {
        const parsedEmojis = JSON.parse(savedEmojis);
        if (Array.isArray(parsedEmojis) && parsedEmojis.length > 0) {
          setEmojis(parsedEmojis);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–º–æ–¥–∑–∏:', error);
      }
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
  const updateEmoji = (index: number, field: 'emoji' | 'label', value: string) => {
    const updatedEmojis = [...emojis];
    updatedEmojis[index] = { ...updatedEmojis[index], [field]: value };
    setEmojis(updatedEmojis);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–º–æ–¥–∑–∏
  const addEmoji = () => {
    setEmojis([...emojis, { emoji: 'üòÄ', label: '–ù–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ' }]);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
  const removeEmoji = (index: number) => {
    if (emojis.length <= 1) {
      toast({
        title: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å',
        description: '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏',
        variant: 'destructive',
      });
      return;
    }
    
    const updatedEmojis = [...emojis];
    updatedEmojis.splice(index, 1);
    setEmojis(updatedEmojis);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const saveSettings = () => {
    setIsSaving(true);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã —ç–º–æ–¥–∑–∏
      const uniqueEmojis = new Set(emojis.map(e => e.emoji));
      if (uniqueEmojis.size !== emojis.length) {
        toast({
          title: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
          description: '–≠–º–æ–¥–∑–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è',
          variant: 'destructive',
        });
        setIsSaving(false);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
      const hasEmptyFields = emojis.some(e => !e.emoji || !e.label);
      if (hasEmptyFields) {
        toast({
          title: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
          description: '–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã',
          variant: 'destructive',
        });
        setIsSaving(false);
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
      localStorage.setItem('custom-emojis', JSON.stringify(emojis));
      
      toast({
        title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
        description: '–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º–æ–¥–∑–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
      });
      
      // –í—ã–∑–æ–≤ –∫–æ–ª–±—ç–∫–∞, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      if (onSave) {
        onSave();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        variant: 'destructive',
      });
    } finally {
      setIsSaving(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const resetToDefaults = () => {
    setEmojis(DEFAULT_EMOJIS);
    localStorage.removeItem('custom-emojis');
    
    toast({
      title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã',
      description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º–æ–¥–∑–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
    });
    
    if (onSave) {
      onSave();
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–º–æ–¥–∑–∏</CardTitle>
        <CardDescription>
          –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {emojis.map((item, index) => (
            <div key={index} className="flex items-center gap-4">
              <div className="w-1/4">
                <Label htmlFor={`emoji-${index}`} className="mb-1 block">
                  –≠–º–æ–¥–∑–∏
                </Label>
                <Input
                  id={`emoji-${index}`}
                  value={item.emoji}
                  onChange={(e) => updateEmoji(index, 'emoji', e.target.value)}
                  className="text-center text-2xl"
                  maxLength={2}
                />
              </div>
              <div className="flex-1">
                <Label htmlFor={`label-${index}`} className="mb-1 block">
                  –ù–∞–∑–≤–∞–Ω–∏–µ
                </Label>
                <Input
                  id={`label-${index}`}
                  value={item.label}
                  onChange={(e) => updateEmoji(index, 'label', e.target.value)}
                />
              </div>
              <Button
                variant="ghost"
                size="icon"
                className="mt-6"
                onClick={() => removeEmoji(index)}
                title="–£–¥–∞–ª–∏—Ç—å"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          ))}
          
          <Button
            variant="outline"
            onClick={addEmoji}
            className="w-full"
          >
            <Plus className="mr-2 h-4 w-4" />
            –î–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏
          </Button>
        </div>
      </CardContent>
      <CardFooter className="flex justify-between">
        <Button
          variant="outline"
          onClick={resetToDefaults}
          disabled={isSaving}
        >
          –°–±—Ä–æ—Å–∏—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º
        </Button>
        <Button
          onClick={saveSettings}
          disabled={isSaving}
        >
          {isSaving ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
            </>
          ) : (
            <>
              <Save className="mr-2 h-4 w-4" />
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </>
          )}
        </Button>
      </CardFooter>
    </Card>
  );
}
