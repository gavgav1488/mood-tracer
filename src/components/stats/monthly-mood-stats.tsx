'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { useSupabase } from '@/hooks/use-supabase';
import { MoodEntry } from '@/lib/supabase';
import { Loader2, ChevronLeft, ChevronRight } from 'lucide-react';
import { 
  format, 
  startOfMonth, 
  endOfMonth, 
  eachDayOfInterval, 
  isSameDay,
  addMonths,
  subMonths,
  getMonth,
  getYear
} from 'date-fns';
import { ru } from 'date-fns/locale';
import { Button } from '@/components/ui/button';
import { 
  Chart as ChartJS, 
  CategoryScale, 
  LinearScale, 
  PointElement, 
  LineElement, 
  BarElement,
  Title, 
  Tooltip, 
  Legend,
  ArcElement,
  RadialLinearScale,
  Filler
} from 'chart.js';
import { Bar, Pie } from 'react-chartjs-2';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Chart.js
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  RadialLinearScale,
  Filler
);

// –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–º–æ–¥–∑–∏
const emojiColors: Record<string, { bg: string; border: string }> = {
  'üòä': { bg: 'rgba(255, 215, 0, 0.2)', border: 'rgba(255, 215, 0, 1)' }, // –†–∞–¥–æ—Å—Ç—å: –∂–µ–ª—Ç—ã–π
  'üòê': { bg: 'rgba(169, 169, 169, 0.2)', border: 'rgba(169, 169, 169, 1)' }, // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ: —Å–µ—Ä—ã–π
  'üò¢': { bg: 'rgba(70, 130, 180, 0.2)', border: 'rgba(70, 130, 180, 1)' }, // –ì—Ä—É—Å—Ç—å: —Å–∏–Ω–∏–π
  'ü•≥': { bg: 'rgba(255, 105, 180, 0.2)', border: 'rgba(255, 105, 180, 1)' }, // –í–æ—Å—Ç–æ—Ä–≥: —Ä–æ–∑–æ–≤—ã–π
  'üò§': { bg: 'rgba(220, 20, 60, 0.2)', border: 'rgba(220, 20, 60, 1)' }, // –ó–ª–æ—Å—Ç—å: –∫—Ä–∞—Å–Ω—ã–π
  'üò¥': { bg: 'rgba(147, 112, 219, 0.2)', border: 'rgba(147, 112, 219, 1)' }, // –£—Å—Ç–∞–ª–æ—Å—Ç—å: —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
  'üò∞': { bg: 'rgba(32, 178, 170, 0.2)', border: 'rgba(32, 178, 170, 1)' }, // –¢—Ä–µ–≤–æ–≥–∞: –±–∏—Ä—é–∑–æ–≤—ã–π
};

// –ù–∞–∑–≤–∞–Ω–∏—è —ç–º–æ—Ü–∏–π
const emojiLabels: Record<string, string> = {
  'üòä': '–†–∞–¥–æ—Å—Ç—å',
  'üòê': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ',
  'üò¢': '–ì—Ä—É—Å—Ç—å',
  'ü•≥': '–í–æ—Å—Ç–æ—Ä–≥',
  'üò§': '–ó–ª–æ—Å—Ç—å',
  'üò¥': '–£—Å—Ç–∞–ª–æ—Å—Ç—å',
  'üò∞': '–¢—Ä–µ–≤–æ–≥–∞',
};

export function MonthlyMoodStats() {
  const [currentMonth, setCurrentMonth] = useState<Date>(new Date());
  const [entries, setEntries] = useState<MoodEntry[]>([]);
  const [loading, setLoading] = useState(true);
  const { getMoodEntries } = useSupabase();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–µ—Å—è—Ü–∞
  useEffect(() => {
    const fetchEntries = async () => {
      setLoading(true);
      try {
        const fetchedEntries = await getMoodEntries();
        setEntries(fetchedEntries);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchEntries();
  }, [getMoodEntries]);

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
  const handlePrevMonth = () => {
    setCurrentMonth(prevMonth => subMonths(prevMonth, 1));
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
  const handleNextMonth = () => {
    setCurrentMonth(prevMonth => addMonths(prevMonth, 1));
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
  const handleCurrentMonth = () => {
    setCurrentMonth(new Date());
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
  const getFilteredEntries = () => {
    const start = startOfMonth(currentMonth);
    const end = endOfMonth(currentMonth);
    
    return entries.filter(entry => {
      const entryDate = new Date(entry.date);
      return entryDate >= start && entryDate <= end;
    });
  };

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
  const prepareMoodDistributionData = () => {
    const filteredEntries = getFilteredEntries();
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —ç–º–æ–¥–∑–∏
    const emojiCounts: Record<string, number> = {};
    
    filteredEntries.forEach(entry => {
      emojiCounts[entry.emoji] = (emojiCounts[entry.emoji] || 0) + 1;
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const labels = Object.keys(emojiCounts).map(emoji => emojiLabels[emoji] || emoji);
    const data = Object.keys(emojiCounts).map(emoji => emojiCounts[emoji]);
    const backgroundColor = Object.keys(emojiCounts).map(emoji => emojiColors[emoji]?.bg || 'rgba(169, 169, 169, 0.2)');
    const borderColor = Object.keys(emojiCounts).map(emoji => emojiColors[emoji]?.border || 'rgba(169, 169, 169, 1)');
    
    return {
      labels,
      datasets: [
        {
          label: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π',
          data,
          backgroundColor,
          borderColor,
          borderWidth: 1,
        },
      ],
    };
  };

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ –¥–Ω—è–º
  const prepareDailyMoodData = () => {
    const filteredEntries = getFilteredEntries();
    const start = startOfMonth(currentMonth);
    const end = endOfMonth(currentMonth);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    const days = eachDayOfInterval({ start, end });
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const labels = days.map(day => format(day, 'd', { locale: ru }));
    
    // –°–æ–∑–¥–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const emojiValues: Record<string, number> = {
      'ü•≥': 6, // –í–æ—Å—Ç–æ—Ä–≥
      'üòä': 5, // –†–∞–¥–æ—Å—Ç—å
      'üòê': 3, // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
      'üò¥': 2, // –£—Å—Ç–∞–ª–æ—Å—Ç—å
      'üò¢': 1, // –ì—Ä—É—Å—Ç—å
      'üò∞': 0, // –¢—Ä–µ–≤–æ–≥–∞
      'üò§': -1, // –ó–ª–æ—Å—Ç—å
    };
    
    const data = days.map(day => {
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
      const entry = filteredEntries.find(e => isSameDay(new Date(e.date), day));
      
      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏, –∏–Ω–∞—á–µ null
      return entry ? (emojiValues[entry.emoji] ?? 3) : null;
    });
    
    return {
      labels,
      datasets: [
        {
          label: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
          data,
          backgroundColor: 'rgba(147, 51, 234, 0.2)',
          borderColor: 'rgba(147, 51, 234, 1)',
          borderWidth: 2,
          tension: 0.3,
          fill: true,
        },
      ],
    };
  };

  // –û–ø—Ü–∏–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
  const barOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        callbacks: {
          label: function(context: any) {
            return `${context.label}: ${context.raw} –∑–∞–ø–∏—Å–µ–π`;
          }
        }
      }
    },
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          precision: 0
        }
      }
    }
  };

  // –û–ø—Ü–∏–∏ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
  const pieOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'right' as const,
      },
      tooltip: {
        callbacks: {
          label: function(context: any) {
            const label = context.label || '';
            const value = context.raw || 0;
            const total = context.chart.data.datasets[0].data.reduce((a: number, b: number) => a + b, 0);
            const percentage = Math.round((value / total) * 100);
            return `${label}: ${value} (${percentage}%)`;
          }
        }
      }
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center py-12">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  const filteredEntries = getFilteredEntries();
  const hasData = filteredEntries.length > 0;

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º</h2>
        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            size="icon"
            onClick={handlePrevMonth}
            className="h-8 w-8 rounded-full"
          >
            <ChevronLeft className="h-4 w-4" />
          </Button>
          <div className="text-sm font-medium min-w-[120px] text-center">
            {format(currentMonth, 'LLLL yyyy', { locale: ru })}
          </div>
          <Button
            variant="outline"
            size="icon"
            onClick={handleNextMonth}
            className="h-8 w-8 rounded-full"
          >
            <ChevronRight className="h-4 w-4" />
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π</CardTitle>
            <CardDescription>
              {hasData 
                ? `–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${filteredEntries.length}` 
                : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'}
            </CardDescription>
          </CardHeader>
          <CardContent className="h-64">
            {hasData ? (
              <Pie data={prepareMoodDistributionData()} options={pieOptions} />
            ) : (
              <div className="flex justify-center items-center h-full">
                <p className="text-muted-foreground">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>
              </div>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º</CardTitle>
            <CardDescription>
              {hasData 
                ? `${format(currentMonth, 'LLLL yyyy', { locale: ru })}` 
                : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'}
            </CardDescription>
          </CardHeader>
          <CardContent className="h-64">
            {hasData ? (
              <Bar data={prepareDailyMoodData()} options={barOptions} />
            ) : (
              <div className="flex justify-center items-center h-full">
                <p className="text-muted-foreground">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
