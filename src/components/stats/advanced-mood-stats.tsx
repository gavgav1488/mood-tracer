'use client';

import { useState, useEffect, useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { useSupabase } from '@/hooks/use-supabase';
import { MoodEntry } from '@/lib/supabase';
import { Loader2, Calendar, BarChart3, PieChart, LineChart, TrendingUp, Download } from 'lucide-react';
import { 
  format, 
  subDays, 
  subMonths, 
  subYears,
  startOfWeek,
  endOfWeek,
  startOfMonth, 
  endOfMonth, 
  startOfYear,
  endOfYear,
  eachDayOfInterval, 
  eachWeekOfInterval,
  eachMonthOfInterval,
  isSameDay,
  isSameWeek,
  isSameMonth,
  differenceInDays,
  addDays,
  getDay
} from 'date-fns';
import { ru } from 'date-fns/locale';
import { 
  Chart as ChartJS, 
  CategoryScale, 
  LinearScale, 
  PointElement, 
  LineElement, 
  BarElement,
  Title, 
  Tooltip, 
  Legend,
  ArcElement,
  RadialLinearScale,
  Filler
} from 'chart.js';
import { Line, Bar, Pie, Radar, Doughnut } from 'react-chartjs-2';
import { Badge } from '@/components/ui/badge';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Chart.js
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  RadialLinearScale,
  Filler
);

export function AdvancedMoodStats() {
  const [entries, setEntries] = useState<MoodEntry[]>([]);
  const [loading, setLoading] = useState(true);
  const [timeRange, setTimeRange] = useState('month'); // 'week', 'month', 'year', 'all'
  const [chartType, setChartType] = useState('line'); // 'line', 'bar', 'pie', 'radar'
  const { getMoodEntries } = useSupabase();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const fetchEntries = async () => {
      setLoading(true);
      try {
        const fetchedEntries = await getMoodEntries();
        setEntries(fetchedEntries);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchEntries();
  }, [getMoodEntries]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
  const getEmojiName = (emoji: string) => {
    const emojiMap: Record<string, string> = {
      'üòä': '–†–∞–¥–æ—Å—Ç—å',
      'üòê': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ',
      'üò¢': '–ì—Ä—É—Å—Ç—å',
      'ü•≥': '–í–æ—Å—Ç–æ—Ä–≥',
      'üò§': '–ó–ª–æ—Å—Ç—å',
      'üò¥': '–£—Å—Ç–∞–ª–æ—Å—Ç—å',
      'üò∞': '–¢—Ä–µ–≤–æ–≥–∞',
    };
    return emojiMap[emoji] || emoji;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —ç–º–æ–¥–∑–∏
  const getEmojiColor = (emoji: string) => {
    const colorMap: Record<string, string> = {
      'üòä': 'rgba(255, 193, 7, 0.7)', // –†–∞–¥–æ—Å—Ç—å - –∂–µ–ª—Ç—ã–π
      'üòê': 'rgba(158, 158, 158, 0.7)', // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ - —Å–µ—Ä—ã–π
      'üò¢': 'rgba(33, 150, 243, 0.7)', // –ì—Ä—É—Å—Ç—å - —Å–∏–Ω–∏–π
      'ü•≥': 'rgba(233, 30, 99, 0.7)', // –í–æ—Å—Ç–æ—Ä–≥ - —Ä–æ–∑–æ–≤—ã–π
      'üò§': 'rgba(244, 67, 54, 0.7)', // –ó–ª–æ—Å—Ç—å - –∫—Ä–∞—Å–Ω—ã–π
      'üò¥': 'rgba(103, 58, 183, 0.7)', // –£—Å—Ç–∞–ª–æ—Å—Ç—å - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
      'üò∞': 'rgba(0, 150, 136, 0.7)', // –¢—Ä–µ–≤–æ–≥–∞ - –±–∏—Ä—é–∑–æ–≤—ã–π
    };
    return colorMap[emoji] || 'rgba(158, 158, 158, 0.7)';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
  const getEmojiValue = (emoji: string) => {
    const valueMap: Record<string, number> = {
      'ü•≥': 6, // –í–æ—Å—Ç–æ—Ä–≥
      'üòä': 5, // –†–∞–¥–æ—Å—Ç—å
      'üòê': 3, // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
      'üò¥': 2, // –£—Å—Ç–∞–ª–æ—Å—Ç—å
      'üò¢': 1, // –ì—Ä—É—Å—Ç—å
      'üò∞': 0, // –¢—Ä–µ–≤–æ–≥–∞
      'üò§': -1, // –ó–ª–æ—Å—Ç—å
    };
    return valueMap[emoji] ?? 3;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
  const getFilteredEntries = () => {
    if (entries.length === 0) return [];

    const now = new Date();
    let startDate: Date;

    switch (timeRange) {
      case 'week':
        startDate = startOfWeek(now, { locale: ru });
        break;
      case 'month':
        startDate = startOfMonth(now);
        break;
      case 'year':
        startDate = startOfYear(now);
        break;
      case 'all':
      default:
        return [...entries].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
    }

    return entries
      .filter(entry => new Date(entry.date) >= startDate)
      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
  };

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
  const prepareMoodTimelineData = () => {
    const filteredEntries = getFilteredEntries();
    if (filteredEntries.length === 0) return null;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã
    const startDate = new Date(filteredEntries[0].date);
    const endDate = new Date(filteredEntries[filteredEntries.length - 1].date);
    
    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –º–∞–ª–æ –∏–ª–∏ –æ–Ω–∏ –≤—Å–µ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å
    if (isSameDay(startDate, endDate)) {
      endDate.setDate(endDate.getDate() + 1);
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –¥–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    const days = eachDayOfInterval({ start: startDate, end: endDate });
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const labels = days.map(day => format(day, 'dd MMM', { locale: ru }));
    
    // –°–æ–∑–¥–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const data = days.map(day => {
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
      const entry = filteredEntries.find(e => isSameDay(new Date(e.date), day));
      
      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏, –∏–Ω–∞—á–µ null
      return entry ? getEmojiValue(entry.emoji) : null;
    });

    return {
      labels,
      datasets: [
        {
          label: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
          data,
          borderColor: 'rgba(147, 51, 234, 1)',
          backgroundColor: 'rgba(147, 51, 234, 0.2)',
          borderWidth: 2,
          tension: 0.3,
          fill: true,
          pointBackgroundColor: 'rgba(147, 51, 234, 1)',
          pointBorderColor: '#fff',
          pointBorderWidth: 1,
          pointRadius: 4,
          pointHoverRadius: 6,
          spanGaps: true,
        },
      ],
    };
  };

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
  const prepareMoodDistributionData = () => {
    const filteredEntries = getFilteredEntries();
    if (filteredEntries.length === 0) return null;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —ç–º–æ–¥–∑–∏
    const emojiCounts: Record<string, number> = {};
    
    filteredEntries.forEach(entry => {
      emojiCounts[entry.emoji] = (emojiCounts[entry.emoji] || 0) + 1;
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    const labels = Object.keys(emojiCounts);
    const data = Object.values(emojiCounts);
    const backgroundColor = labels.map(emoji => getEmojiColor(emoji));
    
    return {
      labels: labels.map(emoji => `${emoji} ${getEmojiName(emoji)}`),
      datasets: [
        {
          data,
          backgroundColor,
          borderColor: backgroundColor.map(color => color.replace('0.7', '1')),
          borderWidth: 1,
        },
      ],
    };
  };

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
  const prepareMoodByWeekdayData = () => {
    const filteredEntries = getFilteredEntries();
    if (filteredEntries.length === 0) return null;
    
    // –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    const weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    const counts = Array(7).fill(0);
    const sums = Array(7).fill(0);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    filteredEntries.forEach(entry => {
      const date = new Date(entry.date);
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ JS (0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç (0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
      const dayIndex = (getDay(date) + 6) % 7;
      counts[dayIndex]++;
      sums[dayIndex] += getEmojiValue(entry.emoji);
    });
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    const averages = counts.map((count, index) => count > 0 ? sums[index] / count : 0);
    
    return {
      labels: weekdays,
      datasets: [
        {
          label: '–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
          data: averages,
          backgroundColor: 'rgba(147, 51, 234, 0.7)',
          borderColor: 'rgba(147, 51, 234, 1)',
          borderWidth: 1,
        },
      ],
    };
  };

  // –û–ø—Ü–∏–∏ –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
  const lineOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        callbacks: {
          label: function(context: any) {
            const value = context.raw;
            if (value === null) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
            
            // –ù–∞—Ö–æ–¥–∏–º —ç–º–æ–¥–∑–∏ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
            const emoji = Object.keys(getEmojiValue).find(key => getEmojiValue(key) === value);
            return emoji ? `${emoji} ${getEmojiName(emoji)}` : `–ó–Ω–∞—á–µ–Ω–∏–µ: ${value}`;
          }
        }
      }
    },
    scales: {
      y: {
        min: -1,
        max: 6,
        ticks: {
          stepSize: 1,
          callback: function(value: number) {
            const emojiValues = {
              '-1': 'üò§',
              '0': 'üò∞',
              '1': 'üò¢',
              '2': 'üò¥',
              '3': 'üòê',
              '5': 'üòä',
              '6': 'ü•≥',
            };
            return emojiValues[value.toString() as keyof typeof emojiValues] || '';
          }
        }
      }
    }
  };

  // –û–ø—Ü–∏–∏ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
  const pieOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'right' as const,
      }
    }
  };

  // –û–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
  const barOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false,
      }
    },
    scales: {
      y: {
        beginAtZero: true
      }
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
  const filteredEntries = useMemo(() => getFilteredEntries(), [entries, timeRange]);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
  const hasData = filteredEntries.length > 0;

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const timelineData = useMemo(() => prepareMoodTimelineData(), [filteredEntries]);
  const distributionData = useMemo(() => prepareMoodDistributionData(), [filteredEntries]);
  const weekdayData = useMemo(() => prepareMoodByWeekdayData(), [filteredEntries]);

  if (loading) {
    return (
      <div className="flex justify-center items-center py-12">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h2 className="text-2xl font-bold">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</h2>
          <p className="text-muted-foreground">
            –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —ç–º–æ—Ü–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
          </p>
        </div>
        
        <div className="flex flex-wrap gap-2">
          <Select value={timeRange} onValueChange={setTimeRange}>
            <SelectTrigger className="w-[140px]">
              <SelectValue placeholder="–ü–µ—Ä–∏–æ–¥" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="week">–ù–µ–¥–µ–ª—è</SelectItem>
              <SelectItem value="month">–ú–µ—Å—è—Ü</SelectItem>
              <SelectItem value="year">–ì–æ–¥</SelectItem>
              <SelectItem value="all">–í—Å–µ –≤—Ä–µ–º—è</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      {!hasData ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <Calendar className="h-12 w-12 text-muted-foreground mb-4" />
            <h3 className="text-xl font-medium mb-2">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h3>
            <p className="text-muted-foreground text-center max-w-md">
              –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏. 
              –ß–µ–º –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑.
            </p>
          </CardContent>
        </Card>
      ) : (
        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg">–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex items-center justify-between">
                  <div className="text-3xl font-bold">{filteredEntries.length}</div>
                  <Badge variant="outline" className="text-xs">
                    {timeRange === 'week' ? '–ó–∞ –Ω–µ–¥–µ–ª—é' : 
                     timeRange === 'month' ? '–ó–∞ –º–µ—Å—è—Ü' : 
                     timeRange === 'year' ? '–ó–∞ –≥–æ–¥' : '–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è'}
                  </Badge>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg">–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</CardTitle>
              </CardHeader>
              <CardContent>
                {(() => {
                  // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ —á–∞—Å—Ç–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
                  const emojiCounts: Record<string, number> = {};
                  filteredEntries.forEach(entry => {
                    emojiCounts[entry.emoji] = (emojiCounts[entry.emoji] || 0) + 1;
                  });
                  
                  const mostFrequentEmoji = Object.entries(emojiCounts)
                    .sort((a, b) => b[1] - a[1])[0][0];
                  
                  return (
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <span className="text-3xl mr-2">{mostFrequentEmoji}</span>
                        <span className="text-lg font-medium">{getEmojiName(mostFrequentEmoji)}</span>
                      </div>
                      <Badge variant="outline" className="text-xs">
                        {Math.round((emojiCounts[mostFrequentEmoji] / filteredEntries.length) * 100)}%
                      </Badge>
                    </div>
                  );
                })()}
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg">–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</CardTitle>
              </CardHeader>
              <CardContent>
                {(() => {
                  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
                  const sum = filteredEntries.reduce((acc, entry) => acc + getEmojiValue(entry.emoji), 0);
                  const avg = sum / filteredEntries.length;
                  
                  // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ —ç–º–æ–¥–∑–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
                  const emojiValues = Object.entries(getEmojiValue);
                  const closestEmoji = emojiValues.reduce((prev, curr) => {
                    return Math.abs(curr[1] - avg) < Math.abs(prev[1] - avg) ? curr : prev;
                  });
                  
                  return (
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <span className="text-3xl mr-2">{closestEmoji[0]}</span>
                        <span className="text-lg font-medium">{getEmojiName(closestEmoji[0])}</span>
                      </div>
                      <Badge variant="outline" className="text-xs">
                        {avg.toFixed(1)} –∏–∑ 6
                      </Badge>
                    </div>
                  );
                })()}
              </CardContent>
            </Card>
          </div>
          
          <Tabs defaultValue="timeline" className="space-y-4">
            <TabsList>
              <TabsTrigger value="timeline" className="flex items-center gap-1">
                <LineChart className="h-4 w-4" />
                <span>–î–∏–Ω–∞–º–∏–∫–∞</span>
              </TabsTrigger>
              <TabsTrigger value="distribution" className="flex items-center gap-1">
                <PieChart className="h-4 w-4" />
                <span>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</span>
              </TabsTrigger>
              <TabsTrigger value="weekday" className="flex items-center gap-1">
                <BarChart3 className="h-4 w-4" />
                <span>–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</span>
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="timeline">
              <Card>
                <CardHeader>
                  <CardTitle>–î–∏–Ω–∞–º–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</CardTitle>
                  <CardDescription>
                    –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
                  </CardDescription>
                </CardHeader>
                <CardContent className="h-80">
                  {timelineData ? (
                    <Line data={timelineData} options={lineOptions} />
                  ) : (
                    <div className="flex justify-center items-center h-full">
                      <p className="text-muted-foreground">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="distribution">
              <Card>
                <CardHeader>
                  <CardTitle>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π</CardTitle>
                  <CardDescription>
                    –ß–∞—Å—Ç–æ—Ç–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                  </CardDescription>
                </CardHeader>
                <CardContent className="h-80">
                  {distributionData ? (
                    <Doughnut data={distributionData} options={pieOptions} />
                  ) : (
                    <div className="flex justify-center items-center h-full">
                      <p className="text-muted-foreground">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="weekday">
              <Card>
                <CardHeader>
                  <CardTitle>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</CardTitle>
                  <CardDescription>
                    –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                  </CardDescription>
                </CardHeader>
                <CardContent className="h-80">
                  {weekdayData ? (
                    <Bar data={weekdayData} options={barOptions} />
                  ) : (
                    <div className="flex justify-center items-center h-full">
                      <p className="text-muted-foreground">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      )}
    </div>
  );
}
