'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useSupabase } from '@/hooks/use-supabase';
import { MoodEntry } from '@/lib/supabase';
import { Loader2 } from 'lucide-react';
import { format, subDays, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay } from 'date-fns';
import { ru } from 'date-fns/locale';
import { 
  Chart as ChartJS, 
  CategoryScale, 
  LinearScale, 
  PointElement, 
  LineElement, 
  BarElement,
  Title, 
  Tooltip, 
  Legend,
  ArcElement,
  RadialLinearScale,
  Filler
} from 'chart.js';
import { Line, Bar, Pie, Radar } from 'react-chartjs-2';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Chart.js
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  RadialLinearScale,
  Filler
);

// –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–º–æ–¥–∑–∏
const emojiColors: Record<string, string> = {
  'üòä': '#FFD700', // –†–∞–¥–æ—Å—Ç—å: –∂–µ–ª—Ç—ã–π
  'üòê': '#A9A9A9', // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ: —Å–µ—Ä—ã–π
  'üò¢': '#4682B4', // –ì—Ä—É—Å—Ç—å: —Å–∏–Ω–∏–π
  'ü•≥': '#FF69B4', // –í–æ—Å—Ç–æ—Ä–≥: —Ä–æ–∑–æ–≤—ã–π
  'üò§': '#DC143C', // –ó–ª–æ—Å—Ç—å: –∫—Ä–∞—Å–Ω—ã–π
  'üò¥': '#9370DB', // –£—Å—Ç–∞–ª–æ—Å—Ç—å: —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
  'üò∞': '#20B2AA', // –¢—Ä–µ–≤–æ–≥–∞: –±–∏—Ä—é–∑–æ–≤—ã–π
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —ç–º–æ–¥–∑–∏
const getEmojiName = (emoji: string) => {
  const emojiMap: Record<string, string> = {
    'üòä': '–†–∞–¥–æ—Å—Ç—å',
    'üòê': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ',
    'üò¢': '–ì—Ä—É—Å—Ç—å',
    'ü•≥': '–í–æ—Å—Ç–æ—Ä–≥',
    'üò§': '–ó–ª–æ—Å—Ç—å',
    'üò¥': '–£—Å—Ç–∞–ª–æ—Å—Ç—å',
    'üò∞': '–¢—Ä–µ–≤–æ–≥–∞',
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —ç–º–æ–¥–∑–∏
  if (typeof window !== 'undefined') {
    try {
      const savedEmojis = localStorage.getItem('custom-emojis');
      if (savedEmojis) {
        const customEmojis = JSON.parse(savedEmojis);
        const customEmojiMap = customEmojis.reduce((acc: Record<string, string>, item: any) => {
          acc[item.emoji] = item.label;
          return acc;
        }, {});
        
        return customEmojiMap[emoji] || emojiMap[emoji] || emoji;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —ç–º–æ–¥–∑–∏:', error);
    }
  }
  
  return emojiMap[emoji] || emoji;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —ç–º–æ–¥–∑–∏
const getEmojiColor = (emoji: string) => {
  return emojiColors[emoji] || '#808080'; // –°–µ—Ä—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
};

export function MoodStats() {
  const [entries, setEntries] = useState<MoodEntry[]>([]);
  const [loading, setLoading] = useState(true);
  const [period, setPeriod] = useState<'week' | 'month' | 'year'>('week');
  const { getMoodEntries } = useSupabase();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const fetchEntries = async () => {
      try {
        setLoading(true);
        const data = await getMoodEntries();
        setEntries(data);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchEntries();
  }, [getMoodEntries]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
  const getFilteredEntries = () => {
    const now = new Date();
    
    if (period === 'week') {
      const weekAgo = subDays(now, 7);
      return entries.filter(entry => new Date(entry.date) >= weekAgo);
    } else if (period === 'month') {
      const monthStart = startOfMonth(now);
      const monthEnd = endOfMonth(now);
      return entries.filter(entry => {
        const entryDate = new Date(entry.date);
        return entryDate >= monthStart && entryDate <= monthEnd;
      });
    } else {
      // –ó–∞ –≥–æ–¥
      const yearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
      return entries.filter(entry => new Date(entry.date) >= yearAgo);
    }
  };

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –¥–Ω—è–º
  const prepareMoodTimelineData = () => {
    const filteredEntries = getFilteredEntries();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    let startDate, endDate;
    const now = new Date();
    
    if (period === 'week') {
      startDate = subDays(now, 7);
      endDate = now;
    } else if (period === 'month') {
      startDate = startOfMonth(now);
      endDate = endOfMonth(now);
    } else {
      startDate = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
      endDate = now;
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –¥–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    const days = eachDayOfInterval({ start: startDate, end: endDate });
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const labels = days.map(day => format(day, 'dd MMM', { locale: ru }));
    
    // –°–æ–∑–¥–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    // –ù–∞–ø—Ä–∏–º–µ—Ä: üòä = 5, üòê = 3, üò¢ = 1
    const emojiValues: Record<string, number> = {
      'ü•≥': 6, // –í–æ—Å—Ç–æ—Ä–≥
      'üòä': 5, // –†–∞–¥–æ—Å—Ç—å
      'üòê': 3, // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
      'üò¥': 2, // –£—Å—Ç–∞–ª–æ—Å—Ç—å
      'üò¢': 1, // –ì—Ä—É—Å—Ç—å
      'üò∞': 0, // –¢—Ä–µ–≤–æ–≥–∞
      'üò§': -1, // –ó–ª–æ—Å—Ç—å
    };
    
    const data = days.map(day => {
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
      const entry = filteredEntries.find(e => isSameDay(new Date(e.date), day));
      
      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏, –∏–Ω–∞—á–µ null
      return entry ? (emojiValues[entry.emoji] ?? 3) : null;
    });
    
    return {
      labels,
      datasets: [
        {
          label: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
          data,
          borderColor: 'rgba(75, 192, 192, 1)',
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          tension: 0.4,
          fill: true,
          pointBackgroundColor: days.map(day => {
            const entry = filteredEntries.find(e => isSameDay(new Date(e.date), day));
            return entry ? getEmojiColor(entry.emoji) : 'rgba(0, 0, 0, 0)';
          }),
          pointRadius: days.map(day => {
            const entry = filteredEntries.find(e => isSameDay(new Date(e.date), day));
            return entry ? 6 : 0;
          }),
          spanGaps: true,
        },
      ],
    };
  };

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
  const prepareMoodDistributionData = () => {
    const filteredEntries = getFilteredEntries();
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —ç–º–æ–¥–∑–∏
    const emojiCounts: Record<string, number> = {};
    
    filteredEntries.forEach(entry => {
      emojiCounts[entry.emoji] = (emojiCounts[entry.emoji] || 0) + 1;
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    const labels = Object.keys(emojiCounts);
    const data = Object.values(emojiCounts);
    const backgroundColor = labels.map(emoji => getEmojiColor(emoji));
    
    return {
      labels: labels.map(emoji => `${emoji} ${getEmojiName(emoji)}`),
      datasets: [
        {
          data,
          backgroundColor,
          borderColor: backgroundColor.map(color => color.replace('1)', '1)')),
          borderWidth: 1,
        },
      ],
    };
  };

  // –û–ø—Ü–∏–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const lineOptions = {
    responsive: true,
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        callbacks: {
          label: function(context: any) {
            const index = context.dataIndex;
            const day = new Date(subDays(new Date(), 7 - index));
            const entry = entries.find(e => isSameDay(new Date(e.date), day));
            
            if (entry) {
              return `${entry.emoji} ${getEmojiName(entry.emoji)}`;
            }
            return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
          }
        }
      }
    },
    scales: {
      y: {
        min: -2,
        max: 7,
        ticks: {
          callback: function(value: any) {
            const emojiForValue: Record<number, string> = {
              6: 'ü•≥ –í–æ—Å—Ç–æ—Ä–≥',
              5: 'üòä –†–∞–¥–æ—Å—Ç—å',
              3: 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ',
              2: 'üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å',
              1: 'üò¢ –ì—Ä—É—Å—Ç—å',
              0: 'üò∞ –¢—Ä–µ–≤–æ–≥–∞',
              '-1': 'üò§ –ó–ª–æ—Å—Ç—å',
            };
            return emojiForValue[value] || '';
          }
        }
      }
    }
  };

  const pieOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'right' as const,
      },
    },
  };

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</CardTitle>
          <CardDescription>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</CardDescription>
        </CardHeader>
        <CardContent className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</CardTitle>
        <CardDescription>–ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏</CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="timeline" className="space-y-4">
          <TabsList className="grid grid-cols-2 mb-4">
            <TabsTrigger value="timeline">–î–∏–Ω–∞–º–∏–∫–∞</TabsTrigger>
            <TabsTrigger value="distribution">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</TabsTrigger>
          </TabsList>
          
          <div className="flex justify-center mb-4">
            <TabsList>
              <TabsTrigger 
                value="week" 
                onClick={() => setPeriod('week')}
                className={period === 'week' ? 'bg-primary text-primary-foreground' : ''}
              >
                –ù–µ–¥–µ–ª—è
              </TabsTrigger>
              <TabsTrigger 
                value="month" 
                onClick={() => setPeriod('month')}
                className={period === 'month' ? 'bg-primary text-primary-foreground' : ''}
              >
                –ú–µ—Å—è—Ü
              </TabsTrigger>
              <TabsTrigger 
                value="year" 
                onClick={() => setPeriod('year')}
                className={period === 'year' ? 'bg-primary text-primary-foreground' : ''}
              >
                –ì–æ–¥
              </TabsTrigger>
            </TabsList>
          </div>
          
          <TabsContent value="timeline" className="h-64">
            {getFilteredEntries().length > 0 ? (
              <Line data={prepareMoodTimelineData()} options={lineOptions} />
            ) : (
              <div className="flex justify-center items-center h-full">
                <p className="text-muted-foreground">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>
              </div>
            )}
          </TabsContent>
          
          <TabsContent value="distribution" className="h-64">
            {getFilteredEntries().length > 0 ? (
              <Pie data={prepareMoodDistributionData()} options={pieOptions} />
            ) : (
              <div className="flex justify-center items-center h-full">
                <p className="text-muted-foreground">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>
              </div>
            )}
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}
